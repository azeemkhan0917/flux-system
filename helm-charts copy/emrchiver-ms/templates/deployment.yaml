apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "emrchiver-common.names.fullname" . }}
  labels:
    {{- include "emrchiver-common.labels.standard" . | nindent 4 }}
  annotations: {{- include "emrchiver-common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "emrchiver-common.labels.matchLabels" . | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: 
    type: {{ .Values.updateStrategy }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.podAnnotationConfigChecksum }}
        checksum/config: {{ tpl (toYaml .Values) . | sha256sum }}
      {{- end }}
      labels:
        {{- include "emrchiver-common.labels.matchLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "emrchiver-common.names.fullname" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-configmap
          volumeMounts:
          {{- if .Values.extraVolumeMounts }}
            {{ toYaml .Values.extraVolumeMounts | indent 10}}
          {{- end }}
          ports:
            {{- range .Values.portMappings }}
            - name: {{ .portName }}
              containerPort: {{ .port }}
              protocol: {{ .protocol }}
            {{- end }}  
          livenessProbe:
            httpGet:
              path: {{ .Values.liveness.path }}
              port: {{ .Values.liveness.port }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.readiness.port }}
          {{- if .Values.resources }}
          resources: {{- include "emrchiver-common.tplvalues.render" (dict "value" .Values.resources "context" $) | nindent 12 }}
          {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "emrchiver-common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:  {{- include "emrchiver-common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:  {{- include "emrchiver-common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
    volumes:
      {{- if .Values.extraVolumes }}
        {{ toYaml .Values.extraVolumes | indent 8}}
      {{- end }}
      
